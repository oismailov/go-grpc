// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data_workflow.proto3

package workflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StreamSource int32

const (
	StreamSource_CSV       StreamSource = 0
	StreamSource_Streaming StreamSource = 1
	StreamSource_Airtable  StreamSource = 2
)

var StreamSource_name = map[int32]string{
	0: "CSV",
	1: "Streaming",
	2: "Airtable",
}
var StreamSource_value = map[string]int32{
	"CSV":       0,
	"Streaming": 1,
	"Airtable":  2,
}

func (x StreamSource) String() string {
	return proto.EnumName(StreamSource_name, int32(x))
}
func (StreamSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_data_workflow_66821f1b13c0d554, []int{0}
}

type DataType int32

const (
	DataType_Collect DataType = 0
	DataType_Clean   DataType = 1
)

var DataType_name = map[int32]string{
	0: "Collect",
	1: "Clean",
}
var DataType_value = map[string]int32{
	"Collect": 0,
	"Clean":   1,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}
func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_data_workflow_66821f1b13c0d554, []int{1}
}

type DataRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 DataType `protobuf:"varint,2,opt,name=type,proto3,enum=DataType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataRequest) Reset()         { *m = DataRequest{} }
func (m *DataRequest) String() string { return proto.CompactTextString(m) }
func (*DataRequest) ProtoMessage()    {}
func (*DataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_workflow_66821f1b13c0d554, []int{0}
}
func (m *DataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataRequest.Unmarshal(m, b)
}
func (m *DataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataRequest.Marshal(b, m, deterministic)
}
func (dst *DataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRequest.Merge(dst, src)
}
func (m *DataRequest) XXX_Size() int {
	return xxx_messageInfo_DataRequest.Size(m)
}
func (m *DataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequest proto.InternalMessageInfo

func (m *DataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DataRequest) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_Collect
}

type DataResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataResponse) Reset()         { *m = DataResponse{} }
func (m *DataResponse) String() string { return proto.CompactTextString(m) }
func (*DataResponse) ProtoMessage()    {}
func (*DataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_workflow_66821f1b13c0d554, []int{1}
}
func (m *DataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataResponse.Unmarshal(m, b)
}
func (m *DataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataResponse.Marshal(b, m, deterministic)
}
func (dst *DataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataResponse.Merge(dst, src)
}
func (m *DataResponse) XXX_Size() int {
	return xxx_messageInfo_DataResponse.Size(m)
}
func (m *DataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DataResponse proto.InternalMessageInfo

func (m *DataResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DataRecord struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Identifier           string   `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Status               string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Fields               []*Field `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataRecord) Reset()         { *m = DataRecord{} }
func (m *DataRecord) String() string { return proto.CompactTextString(m) }
func (*DataRecord) ProtoMessage()    {}
func (*DataRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_workflow_66821f1b13c0d554, []int{2}
}
func (m *DataRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataRecord.Unmarshal(m, b)
}
func (m *DataRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataRecord.Marshal(b, m, deterministic)
}
func (dst *DataRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRecord.Merge(dst, src)
}
func (m *DataRecord) XXX_Size() int {
	return xxx_messageInfo_DataRecord.Size(m)
}
func (m *DataRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DataRecord proto.InternalMessageInfo

func (m *DataRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DataRecord) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *DataRecord) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DataRecord) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func init() {
	proto.RegisterType((*DataRequest)(nil), "DataRequest")
	proto.RegisterType((*DataResponse)(nil), "DataResponse")
	proto.RegisterType((*DataRecord)(nil), "DataRecord")
	proto.RegisterEnum("StreamSource", StreamSource_name, StreamSource_value)
	proto.RegisterEnum("DataType", DataType_name, DataType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataWorkflowClient is the client API for DataWorkflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataWorkflowClient interface {
	New(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	Get(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (DataWorkflow_ListClient, error)
	Sync(ctx context.Context, in *DataRecord, opts ...grpc.CallOption) (*DataRecord, error)
}

type dataWorkflowClient struct {
	cc *grpc.ClientConn
}

func NewDataWorkflowClient(cc *grpc.ClientConn) DataWorkflowClient {
	return &dataWorkflowClient{cc}
}

func (c *dataWorkflowClient) New(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, "/DataWorkflow/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataWorkflowClient) Get(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, "/DataWorkflow/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataWorkflowClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (DataWorkflow_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataWorkflow_serviceDesc.Streams[0], "/DataWorkflow/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataWorkflowListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataWorkflow_ListClient interface {
	Recv() (*DataResponse, error)
	grpc.ClientStream
}

type dataWorkflowListClient struct {
	grpc.ClientStream
}

func (x *dataWorkflowListClient) Recv() (*DataResponse, error) {
	m := new(DataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataWorkflowClient) Sync(ctx context.Context, in *DataRecord, opts ...grpc.CallOption) (*DataRecord, error) {
	out := new(DataRecord)
	err := c.cc.Invoke(ctx, "/DataWorkflow/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataWorkflowServer is the server API for DataWorkflow service.
type DataWorkflowServer interface {
	New(context.Context, *DataRequest) (*DataResponse, error)
	Get(context.Context, *DataRequest) (*DataResponse, error)
	List(*empty.Empty, DataWorkflow_ListServer) error
	Sync(context.Context, *DataRecord) (*DataRecord, error)
}

func RegisterDataWorkflowServer(s *grpc.Server, srv DataWorkflowServer) {
	s.RegisterService(&_DataWorkflow_serviceDesc, srv)
}

func _DataWorkflow_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataWorkflowServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataWorkflow/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataWorkflowServer).New(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataWorkflow_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataWorkflowServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataWorkflow/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataWorkflowServer).Get(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataWorkflow_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataWorkflowServer).List(m, &dataWorkflowListServer{stream})
}

type DataWorkflow_ListServer interface {
	Send(*DataResponse) error
	grpc.ServerStream
}

type dataWorkflowListServer struct {
	grpc.ServerStream
}

func (x *dataWorkflowListServer) Send(m *DataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataWorkflow_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataWorkflowServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataWorkflow/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataWorkflowServer).Sync(ctx, req.(*DataRecord))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataWorkflow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DataWorkflow",
	HandlerType: (*DataWorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _DataWorkflow_New_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DataWorkflow_Get_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _DataWorkflow_Sync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _DataWorkflow_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data_workflow.proto3",
}

func init() { proto.RegisterFile("data_workflow.proto3", fileDescriptor_data_workflow_66821f1b13c0d554) }

var fileDescriptor_data_workflow_66821f1b13c0d554 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xcb, 0x8a, 0x9c, 0x40,
	0x14, 0xf5, 0x15, 0x7b, 0xbc, 0xda, 0x83, 0x14, 0x61, 0x10, 0x43, 0x86, 0x46, 0xb2, 0x90, 0x59,
	0xd4, 0x24, 0x9d, 0x2c, 0xb3, 0x09, 0x9d, 0xc7, 0x26, 0x64, 0xa1, 0x21, 0x59, 0x86, 0x6a, 0xbd,
	0x4a, 0x11, 0xdb, 0x32, 0x56, 0x49, 0xe3, 0x67, 0xe5, 0x0f, 0x83, 0x96, 0x4d, 0x84, 0x5e, 0xcc,
	0xf2, 0x3c, 0xaa, 0x2e, 0xe7, 0x1c, 0x78, 0x5e, 0x32, 0xc5, 0x7e, 0x9d, 0x45, 0xff, 0xbb, 0x6a,
	0xc4, 0x99, 0x76, 0xbd, 0x50, 0xe2, 0x6d, 0xfc, 0xa2, 0x16, 0xa2, 0x6e, 0xf0, 0x71, 0x86, 0xc7,
	0xa1, 0x7a, 0xc4, 0x53, 0xa7, 0x46, 0xad, 0xc6, 0xdb, 0x8a, 0x63, 0x53, 0xca, 0xc5, 0x9b, 0xbc,
	0x07, 0xff, 0x23, 0x53, 0x2c, 0xc3, 0x3f, 0x03, 0x4a, 0x45, 0x6e, 0xc1, 0xe2, 0x65, 0x64, 0xee,
	0xcc, 0xd4, 0xcb, 0x2c, 0x5e, 0x92, 0x97, 0xe0, 0xa8, 0xb1, 0xc3, 0xc8, 0xda, 0x99, 0xe9, 0xed,
	0xde, 0xa3, 0x93, 0xf7, 0xfb, 0xd8, 0x61, 0x36, 0xd3, 0x49, 0x0a, 0x81, 0x7e, 0x2d, 0x3b, 0xd1,
	0x4a, 0x24, 0x11, 0x6c, 0x4e, 0x28, 0x25, 0xab, 0x71, 0xf9, 0xe3, 0x02, 0x13, 0x05, 0xa0, 0x9d,
	0x85, 0xe8, 0xcb, 0xab, 0x33, 0xf7, 0x00, 0xbc, 0xc4, 0x56, 0xf1, 0x8a, 0x63, 0x3f, 0x1f, 0xf3,
	0xb2, 0x15, 0x43, 0xee, 0xc0, 0x95, 0x8a, 0xa9, 0x41, 0x46, 0xf6, 0xac, 0x2d, 0x88, 0xdc, 0x83,
	0xab, 0xe3, 0x44, 0xce, 0xce, 0x4e, 0xfd, 0xbd, 0x4b, 0x3f, 0x4f, 0x30, 0x5b, 0xd8, 0x87, 0x77,
	0x10, 0xe4, 0xaa, 0x47, 0x76, 0xca, 0xc5, 0xd0, 0x17, 0x48, 0x36, 0x60, 0x1f, 0xf2, 0x1f, 0xa1,
	0x41, 0xb6, 0xe0, 0x69, 0x81, 0xb7, 0x75, 0x68, 0x92, 0x00, 0x6e, 0x3e, 0xf0, 0x5e, 0xb1, 0x63,
	0x83, 0xa1, 0xf5, 0x90, 0xc0, 0xcd, 0x25, 0x27, 0xf1, 0x61, 0x73, 0x10, 0x4d, 0x83, 0x85, 0x0a,
	0x0d, 0xe2, 0xc1, 0xb3, 0x43, 0x83, 0xac, 0x0d, 0xcd, 0xfd, 0x5f, 0x53, 0x47, 0xff, 0xb9, 0x74,
	0x4f, 0x5e, 0x81, 0xfd, 0x0d, 0xcf, 0x24, 0xa0, 0xab, 0x3a, 0xe3, 0x2d, 0x5d, 0xd7, 0x93, 0x18,
	0x93, 0xeb, 0x0b, 0xaa, 0xa7, 0x5c, 0x6f, 0xc0, 0xf9, 0xca, 0xa5, 0x22, 0x77, 0x54, 0x2f, 0x49,
	0x2f, 0x4b, 0xd2, 0x4f, 0xd3, 0x92, 0x57, 0x0f, 0x5e, 0x9b, 0x24, 0x01, 0x27, 0x1f, 0xdb, 0x82,
	0xf8, 0xf4, 0x7f, 0xcd, 0xf1, 0x1a, 0x24, 0xc6, 0xd1, 0xd5, 0x9b, 0xff, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0xe1, 0xe6, 0x1f, 0xf3, 0x36, 0x02, 0x00, 0x00,
}
