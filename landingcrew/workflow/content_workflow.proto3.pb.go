// Code generated by protoc-gen-go. DO NOT EDIT.
// source: content_workflow.proto3

package workflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ContentRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContentRequest) Reset()         { *m = ContentRequest{} }
func (m *ContentRequest) String() string { return proto.CompactTextString(m) }
func (*ContentRequest) ProtoMessage()    {}
func (*ContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_workflow_6d210b804615cd10, []int{0}
}
func (m *ContentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentRequest.Unmarshal(m, b)
}
func (m *ContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentRequest.Marshal(b, m, deterministic)
}
func (dst *ContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentRequest.Merge(dst, src)
}
func (m *ContentRequest) XXX_Size() int {
	return xxx_messageInfo_ContentRequest.Size(m)
}
func (m *ContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContentRequest proto.InternalMessageInfo

func (m *ContentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ContentResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContentResponse) Reset()         { *m = ContentResponse{} }
func (m *ContentResponse) String() string { return proto.CompactTextString(m) }
func (*ContentResponse) ProtoMessage()    {}
func (*ContentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_workflow_6d210b804615cd10, []int{1}
}
func (m *ContentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentResponse.Unmarshal(m, b)
}
func (m *ContentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentResponse.Marshal(b, m, deterministic)
}
func (dst *ContentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentResponse.Merge(dst, src)
}
func (m *ContentResponse) XXX_Size() int {
	return xxx_messageInfo_ContentResponse.Size(m)
}
func (m *ContentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContentResponse proto.InternalMessageInfo

func (m *ContentResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ContentRequest)(nil), "ContentRequest")
	proto.RegisterType((*ContentResponse)(nil), "ContentResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContentWorkflowClient is the client API for ContentWorkflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContentWorkflowClient interface {
	New(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*ContentResponse, error)
	Get(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*ContentResponse, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ContentWorkflow_ListClient, error)
}

type contentWorkflowClient struct {
	cc *grpc.ClientConn
}

func NewContentWorkflowClient(cc *grpc.ClientConn) ContentWorkflowClient {
	return &contentWorkflowClient{cc}
}

func (c *contentWorkflowClient) New(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*ContentResponse, error) {
	out := new(ContentResponse)
	err := c.cc.Invoke(ctx, "/ContentWorkflow/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentWorkflowClient) Get(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*ContentResponse, error) {
	out := new(ContentResponse)
	err := c.cc.Invoke(ctx, "/ContentWorkflow/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentWorkflowClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ContentWorkflow_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ContentWorkflow_serviceDesc.Streams[0], "/ContentWorkflow/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentWorkflowListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContentWorkflow_ListClient interface {
	Recv() (*ContentResponse, error)
	grpc.ClientStream
}

type contentWorkflowListClient struct {
	grpc.ClientStream
}

func (x *contentWorkflowListClient) Recv() (*ContentResponse, error) {
	m := new(ContentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContentWorkflowServer is the server API for ContentWorkflow service.
type ContentWorkflowServer interface {
	New(context.Context, *ContentRequest) (*ContentResponse, error)
	Get(context.Context, *ContentRequest) (*ContentResponse, error)
	List(*empty.Empty, ContentWorkflow_ListServer) error
}

func RegisterContentWorkflowServer(s *grpc.Server, srv ContentWorkflowServer) {
	s.RegisterService(&_ContentWorkflow_serviceDesc, srv)
}

func _ContentWorkflow_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentWorkflowServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentWorkflow/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentWorkflowServer).New(ctx, req.(*ContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentWorkflow_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentWorkflowServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentWorkflow/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentWorkflowServer).Get(ctx, req.(*ContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentWorkflow_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContentWorkflowServer).List(m, &contentWorkflowListServer{stream})
}

type ContentWorkflow_ListServer interface {
	Send(*ContentResponse) error
	grpc.ServerStream
}

type contentWorkflowListServer struct {
	grpc.ServerStream
}

func (x *contentWorkflowListServer) Send(m *ContentResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ContentWorkflow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ContentWorkflow",
	HandlerType: (*ContentWorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _ContentWorkflow_New_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ContentWorkflow_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ContentWorkflow_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "content_workflow.proto3",
}

func init() {
	proto.RegisterFile("content_workflow.proto3", fileDescriptor_content_workflow_6d210b804615cd10)
}

var fileDescriptor_content_workflow_6d210b804615cd10 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0xce, 0xcf, 0x2b,
	0x49, 0xcd, 0x2b, 0x89, 0x2f, 0xcf, 0x2f, 0xca, 0x4e, 0xcb, 0xc9, 0x2f, 0xd7, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x37, 0x96, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x73, 0x93, 0x4a,
	0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0x21, 0xb2, 0x4a, 0x2a, 0x5c, 0x7c, 0xce, 0x10, 0x7d,
	0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x36, 0x17, 0x3f, 0x5c, 0x55, 0x71, 0x41,
	0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71, 0x62, 0x3a, 0x4c, 0x25,
	0x8c, 0x6b, 0x34, 0x9f, 0x11, 0xae, 0x3a, 0x1c, 0xea, 0x14, 0x21, 0x2d, 0x2e, 0x66, 0xbf, 0xd4,
	0x72, 0x21, 0x7e, 0x3d, 0x54, 0xcb, 0xa4, 0x04, 0xf4, 0xd0, 0xcc, 0x55, 0x62, 0x00, 0xa9, 0x75,
	0x4f, 0x2d, 0x21, 0x4e, 0xad, 0x09, 0x17, 0x8b, 0x4f, 0x66, 0x71, 0x89, 0x90, 0x98, 0x1e, 0xc4,
	0x93, 0x7a, 0x30, 0x4f, 0xea, 0xb9, 0x82, 0x3c, 0x89, 0x4d, 0x8f, 0x01, 0x63, 0x12, 0x1b, 0x24,
	0x64, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0x86, 0x30, 0x99, 0xe5, 0x33, 0x01, 0x00, 0x00,
}
